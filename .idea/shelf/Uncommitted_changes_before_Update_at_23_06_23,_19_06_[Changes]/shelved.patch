Index: src/main/java/com/example/mailClient/Controller/ClientController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mailClient.Controller;\nimport com.example.mailServer.Controller.ServerLayoutController;\nimport com.example.mailServer.Model.Mail;\nimport javafx.application.Platform;\nimport com.example.mailClient.ClientMain;\n\nimport java.io.*;\nimport java.net.*;\nimport java.util.List;\n\npublic class ClientController implements Serializable {\n  private ClientMain clientMain;\n  private transient boolean serverStatus = false;\n  private Socket socket;\n  private static final String host = \"127.0.1.1\";\n\n  //  private static LoggerModel logger;\n  private static ServerLayoutController logger;\n\n  ObjectOutputStream out;\n  ObjectInputStream in;\n\n  public ClientController(ClientMain clientMain){\n    this.clientMain=clientMain;\n    logger = new ServerLayoutController();\n  }\n\n  /*\n  * @brief: This method checks if the server is online\n   */\n  public boolean checkConnection() {\n    return connectToSocket();\n  }\n\n  private boolean connectToSocket() {\n    try {\n      String hostName = InetAddress.getLocalHost().getHostName();\n      socket = new Socket(hostName, 8189);\n      ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());\n      out.flush();\n      ObjectInputStream in = new ObjectInputStream(socket.getInputStream());\n      this.serverStatus = true;\n    } catch (IOException e) {\n      this.serverStatus = false;\n    }\n    return serverStatus;\n  }\n  public String getMaxTimeStamp(List<Mail> inbox){\n    long maxTimeStamp= 0;\n    for(Mail m:inbox){\n      if(m.getMillis()>maxTimeStamp){\n        maxTimeStamp = m.getMillis();\n      }\n    }\n    return \" \"+ maxTimeStamp;\n  }\n\n  public void noMailPopUp() {\n    Platform.runLater(() -> clientMain.noMailPopUp());\n  }\n public void requestInbox() {\n   try {\n     try (Socket s = new Socket(host, 8189)) {\n       System.out.println(\"Socket opened\"); //TODO debug\n        out = new ObjectOutputStream(s.getOutputStream());\n        in = new ObjectInputStream(s.getInputStream());\n       System.out.println(\"receiving data from server :)\" + s);\n       out.writeObject(\"inbox\");\n       out.writeObject(clientMain.getUserMail());\n       out.writeObject(getMaxTimeStamp(clientMain.getInbox()));\n       List<Mail> res = (List<Mail>) in.readObject();\n       in.close();\n       out.close();\n       if (res != null) {\n         if (res.size() > 0) {\n           clientMain.addInbox(res);\n           clientMain.showNewMailPopUp(res.size());\n         }\n       } else {\n         noMailPopUp();\n       }\n     } catch (ClassNotFoundException e) {\n       e.printStackTrace();\n     }\n\n   } catch (IOException e) {\n     e.printStackTrace();\n   }\n }\n\n    public boolean requestAll(){\n      try {\n        try(Socket s = new Socket(host,8189)){\n          System.out.println(\"[Client Controller] socket opened :)\"+ s); //TODO debug\n           in= new ObjectInputStream(s.getInputStream());\n           out = new ObjectOutputStream(s.getOutputStream());\n           String getInput;\n          out.writeObject(\"all\");\n          out.writeObject(clientMain.getUserMail());\n          List<Mail> resIn = (List<Mail>) in.readObject();\n          List<Mail> resOut = (List<Mail>) in.readObject();\n          in.close();\n          out.close();\n          if(resIn != null && resOut != null){\n            if(resIn.size() >0) {\n              clientMain.addInbox(resIn);\n              clientMain.addOutbox(resOut);\n            }\n            } else {\n              return false;\n          }\n        } catch (ClassNotFoundException e){\n          e.printStackTrace();\n          return false;\n        }\n      } catch (IOException e){\n        e.printStackTrace();\n        return false;\n      }\n      return true;\n   }\n\n  public static void sendMail(Mail mail, ClientMain clientMain) {\n    clientMain.setMailSent(false);\n    try (Socket s = new Socket(host, 8189)) {\n      ObjectInputStream in = new ObjectInputStream(s.getInputStream());\n      ObjectOutputStream out = new ObjectOutputStream(s.getOutputStream());\n      out.writeObject(\"send\");\n      System.out.println(\"action send written to server\");\n      out.writeObject(mail);\n      out.flush();\n      System.out.println(\"[send mail CC] mail written to server\\n\" + mail.toString());\n\n      System.out.println(\"in.available() = \" + in.available()); //FIXME in.available() is always 0 and the program gets stuck here due to EOF\n      // Read the response from the server\n      Object response = in.readObject();\n      if (response instanceof Mail responseMail) {\n        System.out.println(\"Received response mail: \" + responseMail);\n        clientMain.setMailSent(true);\n        System.out.println(\"Received response mail: \" + responseMail);\n        Platform.runLater(() -> clientMain.addOut(responseMail));\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n  public static  void deleteMail(Mail mail,ClientMain clientMain){\n    try (Socket s = new Socket(host,8189)){\n      ObjectOutputStream out = new ObjectOutputStream(s.getOutputStream());\n      ObjectInputStream in = new ObjectInputStream(s.getInputStream());\n      out.writeObject(\"delete\");\n      out.writeObject(clientMain.getUserMail());\n      out.writeObject(mail);\n      Platform.runLater(()->clientMain.delete(mail));\n\n    } catch (Exception e){\n      e.printStackTrace();\n    }\n   }\n }\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/mailClient/Controller/ClientController.java b/src/main/java/com/example/mailClient/Controller/ClientController.java
--- a/src/main/java/com/example/mailClient/Controller/ClientController.java	(revision c18f216876c6189718274d9f1045c91fb451fb53)
+++ b/src/main/java/com/example/mailClient/Controller/ClientController.java	(date 1687537509613)
@@ -12,7 +12,7 @@
   private ClientMain clientMain;
   private transient boolean serverStatus = false;
   private Socket socket;
-  private static final String host = "127.0.1.1";
+  private static final String host = "127.0.0.1";
 
   //  private static LoggerModel logger;
   private static ServerLayoutController logger;
